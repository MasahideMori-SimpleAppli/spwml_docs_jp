======================================
SpWMLをコードから操作する
======================================

基本操作
===============

以下のサンプルを確認いただくと分かりやすいです。
https://pub.dev/packages/simple_widget_markup/example

上記サンプル中のSpWMLのパラメータには、「id」というものがあります。
例えば「id:1」と記載しているブロックは、Dartコードから

.. code-block:: none
   
   BtnElement btnElement = builder.getElementByID(1) as BtnElement;

のように取得することができます。
「BtnElement」の部分は、何を取得するのかで変わります。
基本的に「SpWMLの型名+Element」という名前のクラスがあるので、それを入力すれば良いです。
各クラスは、以下のようにFlutterの同様なクラスとほぼ同じパラメータを持っており、クラスパラメータを書き換えることで、
コードからほぼ全てをコントロール出来るようになっています。
どのようなパラメータを持っているかについてはこのホームページの :ref:`「クラスと機能」<classes_and_methods>` を参照してください。

.. code-block:: none
   
   BtnElement btnElement = builder.getElementByID(1) as BtnElement;
   runBtn.elParams.p.normalBtnParams?.style = const ButtonStyle();
   runBtn.textParams.p.isSelectable = true;

----

Flutterウィジェットとの連携
============================

構造体の :ref:`block<block>` を使うと、以下のように内部にウィジェットを埋め込むことが出来ます。
これを利用すると、デザイナーがデザインツールで作成した画面パーツをFlutter Widgetに変換すれば、それを簡単に埋め込めます。

.. code-block:: none

   SpWMLBuilder b = SpWMLBuilder(layout);
   b.replaceID(ここには子要素を置き換えたいblockのIDを記載します。, Widgetをここに入れます);
   Widget compiledWidget = b.build(context);

既存のコードを再利用したり、静的な言語で書くのが難しい特殊な画面パーツを埋め込む場合はこのようにしてください。