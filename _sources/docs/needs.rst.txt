======================================
SpWMLのニーズ
======================================

SpWMLが目指しているもの
=======================
SpWMLは「プログラムのUI」を、「素早く」、「高いメンテナンス性を持たせながら」作れることを目指しています。
なので、以下のようなケースに特に向いています。

* 開発スピードが速く、またアップデート回数の多い、ベンチャーやスタートアップの新規開発。
* MVPのプロトタイピングや実験的なプロジェクト。
* 業務システムの開発。

SpWMLを利用することによって、ただ素早く組めるだけでは無く、スパゲティコードがそもそも作りにくくなります。
スタートアップやベンチャーであれば、出来上がったは良いけどメンテナンス性が・・・と始まるデスマーチをある程度回避できるようになるでしょう。
何故なら、スタートアップの創業者である作者がそのために作成したからです。
また、非常に一貫した内容でデザイン部分を作成できるため、業務システムの開発でも使い勝手が良いと思います。
自由度が制限されることによって、担当者の引き継ぎ後にコードが意味不明になったということが起こりづらくなります。
このようにSpWMLは、ビジネス的な実用性を最優先に開発が進められています。


開発の小話
===========
SpWMLはFlutterを用いた開発で使うためのものです。
Flutterはとても素晴らしいツールで、拡張性に優れ、しかもマルチプラットフォームで動きます。
しかし、拡張性に優れる分、コード量がどうしても多くなりますし、全てがプログラムコードであるため動作速度が上がりますが、
デザインが分離しづらく、コードの使いまわしのためにそれなりの知識が要求されます。

こう言うと、ある一定の層からは恐らく反対の声が上がると思います。
「十分簡単だ」「デザインの分離はまったく難しくない」「学習は十分容易だ」と。
もちろんエキスパートが常に居れば良いのですが、会社経営的な観点からは望ましくありません。
担当者が病気になったり退職したら簡単に崩壊するような体制や、育成コストがかかりすぎるのは良くないです。
特に、行数の多いプログラムコードは担当者が去れば簡単にロストテクノロジーを使った遺物になりえます。
これは少しでも軽減すべきで、軽減すれば大きな価値が生まれます。

何か良い方法は無いかと考えたとき、Markdownやxmlでのデザイン作成がまず思い浮かぶでしょう。
しかし、Markdownでは機能が明らかに足りません。大量に拡張を入れた機能拡張版も考えられなくもないのですが、それはもう別物です。
xmlはモバイル開発でも使われますし拡張性も良いのですが、今度は拡張性が高すぎて複雑です。
そして、閉じタグやダブルクォートも、打ち込む観点からはとても面倒です。
エディタによるコード補完があったとしても、目で見たときの情報量が多くなりますし、文章量が多いことで動的なコンパイルが遅くなります。

これらをSpWMLは解決します。
実は最初はFlutter Webでアプリ内ニュース配信を行う際に色々ハードルがあったため作られた言語なのですが、
その時に搭載されていたSpWMLをWidgetにコンバートする機能がどんどん拡張され、開発そのものをサポートする現在の形となっています。